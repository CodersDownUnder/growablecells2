import com.hypherionmc.modpublisher.properties.ModLoader

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.161'
    //id "io.github.themrmilchmann.curseforge-publish" version "0.6.1"
    id "com.hypherionmc.modutils.modpublisher" version "2.1.6"
}

version = mod_version
group = mod_group_id

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

base {
    archivesName = mod_id
}


println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

runs {
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments('--all', '--output', project.file('src/generated/resources').getAbsolutePath(),
                '--mod', 'growablecells', '--existing', project.file('src/main/resources/').getAbsolutePath(),
                '--existing-mod', "mekanism",
                '--existing-mod', "ae2",
                '--existing-mod', "refinedstorage",
                '--existing-mod', "extradisks",
                '--existing-mod', "extrastorage")
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven {
        name 'TOP'
        url 'https://maven.tterrag.com/'
    }
    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven {
        name 'RS maven'
        url = uri('https://maven.pkg.github.com/refinedmods/refinedstorage')
        credentials {
            username = 'anything'
            password = '\u0067hp_oGjcDFCn8jeTzIj4Ke9pLoEVtpnZMP4VQgaX'
        }
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url = uri("https://maven.creeperhost.net")
    }
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {

    implementation "net.neoforged:neoforge:${neo_version}"

    implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}"
    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}:api"

    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    // at runtime, use the full JEI jar for Forge
    localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    implementation "mcjty.theoneprobe:theoneprobe:${top_version}"

    implementation "com.refinedmods:refinedstorage:${rs_version}"

    implementation "appeng:appliedenergistics2-neoforge:${ae2_version}"

    //implementation fg.deobf("curse.maven:extradisks-351491:4978177")


    implementation "curse.maven:extrastorage-410168:${extrastorage_file}"
    implementation "curse.maven:edivadlib-638508:${edivadlib_file}"

    //runtimeOnly fg.deobf("net.darkhax.bookshelf:Bookshelf-Forge-${mc_version}:${bookshelf_version}")
    //runtimeOnly fg.deobf("net.darkhax.botanypots:BotanyPots-Forge-${mc_version}:${botanypot_version}")

    //compileOnly "mekanism:Mekanism:${mekanism_version}:api"
    compileOnly "mekanism:Mekanism:${mekanism_version}:api"
//
//    // If you want to test/use Mekanism & its modules during `runClient` invocation, use the following
    localRuntime "mekanism:Mekanism:${mekanism_version}"// core
    localRuntime "mekanism:Mekanism:${mekanism_version}:additions"// Mekanism: Additions
    localRuntime "mekanism:Mekanism:${mekanism_version}:generators"// Mekanism: Generators
    localRuntime "mekanism:Mekanism:${mekanism_version}:tools"


    //annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
            rs_version          : rs_version, ae2_version: ae2_version,
            mekanism_version    : mekanism_version, extrastorage_version: extrastorage_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
//
//jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}


//
//curseforge {
//    apiToken = System.getenv("CURSEFORGE_TOKEN") ?: project.findProperty("CURSEFORGE_TOKEN")
//    publications {
//
//        register("curseForge") {
//
//
//            projectId = "465594"
//
//            artifacts.register("main") {
//
//
//                displayName = "${mod_id}-${mod_version}-${minecraft_version}"
//                releaseType = ReleaseType.RELEASE
//
//                changelog {
//                    format = ChangelogFormat.MARKDOWN
//                    content = file("changelog.md").text
//                }
//
//                relations {
//                    optionalDependency("applied-energistics-2")
//                    optionalDependency("refined-storage")
//                    optionalDependency("extrastorage")
//                    optionalDependency("mekanism")
//                }
//            }
//        }
//    }
//}

publisher {
    // Setup the required API keys. You only need to define the keys for
    // the platforms you plan on uploading to
    apiKeys {
        // Modrinth Token
        modrinth System.getenv("MODRINTH_TOKEN") ?: project.findProperty("MODRINTH_TOKEN")

        //Curseforge Token
        curseforge System.getenv("CURSEFORGE_TOKEN") ?: project.findProperty("CURSEFORGE_TOKEN")
    }

    // Enable Debug mode. When enabled, no files will actually be uploaded
    setDebug(false)

    // Modrinth Project ID
    setModrinthID("growablecells2")

    setCurseID("465594")

    // Type of release. beta, alpha or release
    // You can also use VersionType.BETA, VersionType.ALPHA or VersionType.RELEASE
    setVersionType("release")

    // Changelog. This can be a file, string, OR, gist/github url
    // For example: markdown.md, or "This is my changelog"
    // Or: https://raw.githubusercontent.com/hypherionmc/changelogs/changelog.md
    // Or https://gist.githubusercontent.com/hypherionmc/92f825d3c9337964cc77c9c8c9bf65e6/raw/ceeaaee5b98c688a23398864fe480b84796a1651/test_gist.md
    setChangelog(file("changelog.md").text)

    // Required for Modrinth/GitHub
    setProjectVersion("1.20.4-${mod_version}")

    // Fancy display name for the upload.
    // Will default to the project version if not set
    setDisplayName("Growable Cells 2 - ${mod_version} - ${minecraft_version}")

    // The supported game versions
    setGameVersions("${minecraft_version}")

    setArtifact(jar)

    // The modloaders your upload supports.
    // This can also be an Enum from ModLoader,
    // like setLoaders(ModLoader.FABRIC, ModLoader.FORGE)
    setLoaders(ModLoader.NEOFORGE)

    modrinthDepends {
        optional 'extrastorage'
        optional 'mekanism'
        optional 'ae2'
        optional 'refined-storage'
    }

    curseDepends {
        optional 'extrastorage'
        optional 'mekanism'
        optional 'applied-energistics-2'
        optional 'refined-storage'
    }

}
